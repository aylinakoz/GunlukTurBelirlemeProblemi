#include <stdio.h>
int main(){
	
	FILE *MODEL;
	
	MODEL=fopen("MODEL.txt","w");
	
	int i,j,Q=40;
	int q[30]={1,0,19,0,0,5,0,0,0,15,0,0,13,0,12,5,15,0,0,13,0,24,0,0,0,0,0,22,7,0};
	int n=30;
	int c;
	int a,t=0;
	int C1=50;
	int C2=5;
	int sayac=0;
	int art;
	int top=0;
	int K[30][30]={{51, 27, 44, 50, 99, 74, 58, 28, 62, 84, 45, 75, 71, 97, 71, 51, 35, 72, 67, 46, 91, 34, 42, 73, 32, 62, 61, 96, 18, 15},
                   {57, 46, 21, 28, 79, 32, 27, 29, 35, 94, 93, 61, 12, 13, 43, 84, 31, 71, 93, 38, 87, 24, 92, 97, 67, 89, 93, 31, 89, 68},
                   {86, 75, 60, 52, 28, 56, 50, 42, 14, 68, 96, 55, 60, 79, 80, 60, 76, 61, 13, 48, 19, 33, 64, 74, 46, 60, 26, 96, 81, 38},
                   {34, 49, 66, 83, 57, 38, 18, 22, 79, 81, 73, 75, 59, 58, 34, 40, 37, 66, 93, 76, 81, 45, 24, 92, 70, 79, 57, 13, 67, 52},
                   {56, 70, 81, 16, 45, 27, 85, 14, 81, 92, 90, 80, 31, 44, 26, 20, 67, 51, 17, 97, 77, 57, 43, 43, 15, 99, 89, 48, 21, 58},
                   {42, 26, 66, 80, 43, 18, 10, 21, 52, 45, 50, 69, 94, 27, 48, 13, 65, 91, 12, 60, 41, 66, 24, 50, 16, 91, 88, 79, 58, 14},
                   {11, 64, 63, 29, 58, 48, 70, 18, 47, 27, 48, 53, 88, 83, 87, 91, 10, 57, 53, 74, 99, 66, 45, 91, 90, 39, 59, 66, 38, 73},
                   {24, 38, 94, 39, 59, 42, 55, 65, 43, 43, 23, 67, 74, 63, 78, 10, 58, 58, 70, 96, 48, 81, 69, 18, 29, 77, 52, 52, 98, 62},
                   {18, 69, 20, 57, 48, 81, 25, 38, 86, 91, 12, 34, 72, 85, 88, 66, 92, 36, 75, 93, 89, 82, 94, 76, 21, 58, 72, 31, 41, 39},
                   {57, 46, 92, 99, 45, 12, 90, 90, 43, 59, 51, 28, 91, 79, 55, 53, 62, 65, 72, 35, 98, 26, 97, 97, 32, 72, 39, 94, 81, 99},
                   {96, 19, 38, 82, 15, 35, 24, 89, 71, 72, 95, 70, 38, 73, 39, 13, 89, 86, 47, 29, 59, 77, 76, 89, 23, 75, 67, 86, 36, 95},
                   {18, 92, 45, 94, 34, 11, 96, 71, 36, 33, 93, 65, 55, 83, 22, 18, 42, 75, 93, 46, 71, 38, 76, 92, 41, 14, 76, 72, 29, 11},
                   {55, 30, 23, 36, 84, 69, 22, 79, 73, 54, 64, 90, 75, 49, 56, 43, 74, 42, 18, 78, 77, 15, 58, 21, 42, 35, 27, 14, 54, 94},
                   {94, 54, 82, 99, 53, 90, 27, 47, 58, 87, 53, 60, 63, 68, 12, 45, 52, 30, 63, 77, 42, 59, 27, 25, 23, 44, 53, 12, 21, 61},
                   {53, 82, 55, 63, 55, 81, 42, 62, 42, 66, 24, 80, 27, 90, 13, 24, 60, 20, 65, 63, 11, 30, 96, 87, 95, 50, 60, 24, 95, 34},
                   {39, 65, 36, 14, 78, 32, 11, 66, 98, 13, 11, 24, 38, 34, 69, 32, 20, 97, 20, 46, 20, 87, 50, 75, 46, 87, 83, 88, 64, 79},
                   {62, 86, 55, 77, 67, 84, 25, 77, 59, 78, 53, 90, 72, 32, 43, 36, 57, 41, 35, 45, 14, 80, 92, 26, 90, 86, 41, 91, 31, 87},
                   {13, 20, 10, 84, 48, 83, 90, 71, 42, 69, 40, 83, 68, 38, 95, 57, 57, 40, 58, 59, 63, 80, 17, 84, 97, 78, 63, 47, 11, 90},
                   {70, 28, 43, 34, 65, 70, 71, 94, 65, 56, 52, 20, 23, 95, 46, 96, 16, 97, 76, 47, 97, 61, 29, 31, 36, 72, 17, 42, 37, 76},
                   {75, 21, 43, 19, 29, 75, 89, 32, 76, 75, 93, 52, 84, 44, 94, 62, 47, 69, 42, 93, 97, 63, 21, 35, 87, 88, 95, 78, 73, 12},
                   {94, 41, 71, 25, 49, 15, 81, 60, 16, 84, 95, 23, 10, 38, 59, 31, 53, 54, 27, 84, 76, 23, 16, 65, 42, 28, 51, 40, 23, 91},
                   {65, 25, 12, 42, 81, 17, 94, 18, 52, 93, 46, 83, 60, 53, 75, 12, 48, 80, 37, 92, 42, 15, 39, 81, 70, 38, 75, 20, 67, 79},
                   {80, 35, 13, 64, 31, 20, 94, 18, 75, 39, 42, 55, 74, 41, 73, 59, 25, 98, 52, 67, 99, 46, 11, 47, 87, 31, 39, 20, 13, 24},
                   {91, 57, 65, 53, 33, 62, 94, 31, 92, 19, 70, 68, 47, 44, 95, 76, 28, 50, 87, 97, 34, 63, 81, 83, 46, 33, 20, 41, 49, 70},
                   {24, 82, 69, 43, 41, 54, 58, 62, 40, 15, 35, 19, 43, 92, 48, 97, 94, 68, 11, 54, 63, 15, 45, 12, 96, 58, 69, 62, 69, 45},
                   {39, 24, 85, 10, 35, 48, 68, 70, 71, 73, 82, 92, 72, 77, 50, 73, 31, 13, 33, 27, 90, 69, 75, 85, 38, 43, 67, 28, 73, 47},
                   {99, 13, 19, 11, 68, 12, 78, 30, 81, 58, 84, 18, 26, 70, 39, 73, 20, 70, 38, 77, 46, 93, 45, 16, 75, 28, 53, 79, 74, 98},
                   {43, 39, 47, 26, 94, 25, 18, 66, 41, 65, 25, 51, 59, 56, 54, 75, 64, 42, 75, 13, 42, 66, 88, 62, 96, 36, 83, 49, 14, 55},
                   {26, 32, 35, 43, 15, 26, 76, 81, 44, 64, 76, 92, 96, 68, 62, 15, 55, 61, 60, 31, 55, 41, 67, 56, 80, 40, 92, 44, 13, 13},
                   {96, 52, 68, 72, 13, 64, 23, 84, 33, 46, 68, 64, 87, 83, 29, 98, 50, 30, 88, 38, 30, 45, 51, 64, 33, 86, 43, 99, 62, 61}};
	
	
	
	
	
	
	
	fprintf(MODEL,"minimize \n\n");                      ///////////// AMAÇ FONKSÝYONU //////////////////
	fprintf(MODEL,"%dm +",C1);		                           
	
	for(j=2;j<=n;j++){                
		for(i=1;i<=n;i++){
			if(i!=j){  	
			a = C2*K[i-1][j-1];
	        fprintf(MODEL," %dX_%d_%d",a,i,j);
			if(i==n-1 & j==n){
				break;
			}	
            fprintf(MODEL," +");
		    } 	
        }	        
    }
    
    
    
	fprintf(MODEL,"\n\nsubject to \n\n");
	
	
	
	
	
	
	
	for(j=2;j<=n;j++){                                              //////////// 2. KISIT /////////////////
		for(i=1;i<=n;i++){                                     
			if(i!=j && q[i-1]!=0 && q[j-1]!=0){  
			    	fprintf(MODEL,"X_%d_%d",i,j);
			    	art=sayac+1;
				if(i==n-1 && j==n){
					break;
				}		   
			    if(i!=n){
			    	for(c=i;c<=n-1;c++){
			    		top=top+q[c];
					}
					if(top!=0){
						fprintf(MODEL,"+");
					}
					top=0;   
			    }
			} 
		}
		if(art>sayac){
			fprintf(MODEL,"=1\n");
			sayac++;
		}
	}
	fprintf(MODEL,"\n");
	
	
	
	
	
	
	
    c=0;
	top=0;
	art=0;
	sayac=0;
	
	for(i=2;i<=n;i++){                                    /////////////// 3. KISIT   ///////////////////
		for(j=1;j<=n;j++){                                   
			if(i!=j && q[i-1]!=0 && q[j-1] !=0 ){ 
			    fprintf(MODEL,"X_%d_%d",i,j);
			    art=sayac+1;
			    if(i==n & j==n-1){
					break;
				}	
			    if(j!=n){
			    	for(c=j;c<=n-1;c++){
			    		top=top+q[c];
					}
					if(top!=0){
						fprintf(MODEL,"+");
					}
					top=0;   
			    }
		    }			
		}
		if(art>sayac){
			fprintf(MODEL,"=1\n");
			sayac++;
		}
    } 
    
    
    


    fprintf(MODEL,"\n");






    top=0;
    c=0;
    for(i=2;i<=n;i++){                            ////////////////  4. KISIT  ///////////////
    	if(i!=j && q[i-1]!=0){                          
    	fprintf(MODEL,"X_1_%d",i);
			if(i!=n){
			    for(c=i;c<=n-1;c++){
			    	top=top+q[c];
				}
				if(top!=0){
					fprintf(MODEL,"+");
				}
				top=0;  
            }	
		} 		
    }
	fprintf(MODEL,"-m=0\n"); 
	
	
	
	
	
	
	
	fprintf(MODEL,"\n");
	
	
	
	
	
	
    top=0;
    c=0;
    for(i=2;i<=n;i++){                                     ////////////////  5. KISIT  ///////////////
    	if(i!=j && q[i-1]!=0){                                        
    	fprintf(MODEL,"X_%d_1",i);
			if(i!=n){
			    for(c=i;c<=n-1;c++){
			    	top=top+q[c];
				}
				if(top!=0){
					fprintf(MODEL,"+");
				}
				top=0;  
			} 
 	   }				
    }
	fprintf(MODEL,"-m=0\n"); 	






	fprintf(MODEL,"\n");
	 
	 
	 
	 
	 
	 
	 
    top=0;
    c=0;	 
	for(i=2;i<=n;i++){                                         ////////////  15. KISIT /////////////
		for(j=1;j<=n;j++){                            
			if(q[i-1]!=0 && q[j-1] !=0){                                          
			    if(i!=j){  
			        fprintf(MODEL,"Y_%d_%d",i,j);
			        if(i==n & j==n-1){
				        break;
			        }
			        if(j!=n){
			            for(c=j;c<=n-1;c++){
			    	        top=top+q[c];
				        }
				        if(top!=0){
					        fprintf(MODEL,"+");
				        }
				        top=0;
			        }
		        }
			}
			
		}
		if(q[i-1]!=0){
			fprintf(MODEL,"-");
		}
		for(j=1;j<=n;j++){
			if(q[i-1]!=0 && q[j-1] !=0){
				if(i!=j){ 
			        fprintf(MODEL,"Y_%d_%d",j,i);
			        if(i==n && j==n-1){
				        break;
			        }
			        if(j!=n){
			            for(c=j;c<=n-1;c++){
			    	        top=top+q[c];
				        }
				        if(top!=0){
					        fprintf(MODEL,"-");
				        }
				        top=0;
			        }
		        }
			}
			
		}
		if(q[i-1]!=0){
			fprintf(MODEL,"=%d \n",q[i-1]);
		}			
    }
    
    
    
    

     fprintf(MODEL,"\n");
     
     
     
     
     
     
     
    
	for(i=2;i<=n;i++){                             ////////////   16. KISIT ///////////
		if(i!=j && q[i-1]!=0){                        
		    fprintf(MODEL,"Y_%d_1",i);
		    if(i!=n){
			    for(c=i;c<=n-1;c++){
			    	top=top+q[c];
				}
				if(top!=0){
					fprintf(MODEL,"+");
				}
				top=0;
		    }
	    }			
	}	
	fprintf(MODEL,"=");
	for(i=2;i<=n;i++){ 
			if(i!=j & q[i-1]!=0 ){    
			t = t+q[i-1];   
			}
	}
	fprintf(MODEL,"%d",t);
	fprintf(MODEL,"\n\n");
	
	
	
	
	
	
	
	


	for(i=2;i<=n;i++){                                           ////// 17 NÝN EKÝ  ///////           
	    if(q[i-1]!=0){
	    	fprintf(MODEL,"Y_%d_1 - %dX_%d_1 <= 0\n",i,Q,i);
		}
		
		
	}
	for(j=2;j<=n;j++){                                            //////////  17. KISIT  ///////////
		for(i=1;i<=n;i++){                                           
			if(i!=j && q[j-1]!=0){  
			fprintf(MODEL,"Y_%d_%d - %dX_%d_%d + %dX_%d_%d <= 0 \n",i,j,Q,i,j,q[j-1],i,j);
		    }
	    }
	}
	fprintf(MODEL,"\n\n");
	
	
	
	
	
	
	
	
	
	
	for(j=1;j<=n;j++){                                                    /////////////  18. KISIT /////////////
		for(i=2;i<=n;i++){                                                      
			if(i!=j & q[i-1]!=0){ 
			fprintf(MODEL,"Y_%d_%d - %dX_%d_%d >= 0 \n",i,j,q[i-1],i,j);
		    }
	    }
    }











	fprintf(MODEL,"\nbin\n\n");
	for(j=2;j<=n;j++){                                            //////////   8. KISIT  ////////////
		for(i=1;i<=n;i++)                                             
			if(i!=j){  
			fprintf(MODEL,"X_%d_%d\n",i,j);
		}
	}
	fprintf(MODEL,"\nend");

	fclose(MODEL);
	
	return 0;
}
